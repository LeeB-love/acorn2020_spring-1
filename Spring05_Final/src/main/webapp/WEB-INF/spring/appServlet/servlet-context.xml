<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	   <!-- 
     	 JNDI(디렉토리 서비스에서 제공하는 데이터 및 객체를 발견하고 참고 하기 위한 자바 API) 
     	 데이터 소스 객체 얻어오는 설정   
     	 Servers/context.xml 에 설정된 oracle 접속정보 가 있어야 된다. 
       
	      <Resource name="jdbc/myoracle" auth="Container"
	              type="javax.sql.DataSource" driverClassName="oracle.jdbc.OracleDriver"
	              url="jdbc:oracle:thin:@127.0.0.1:1521:xe"
	              username="scott" password="tiger" maxTotal="20" maxIdle="10"
	              maxWaitMillis="-1"/>          
   		-->

	<beans:bean id="dataSource" 
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="java:comp/env/jdbc/myoracle"/>
	</beans:bean>
	
	<!-- 
             위는 아래의 코드와 같다
      dataSource = new JndiObjectFactoryBean();
      dataSource.setJndiName("java:comp/env/jdbc/myoracle");
    -->
   
   <!-- DI : dependency injection  - 의존성 주입
   class SqlSessionTemplate implements SqlSession  (sqlsession 인터페이스를 구현한 객체 그래서 sqlsession 타입이기도 함)
   -->
	
	
	<!-- ============== SplSessionFactory 설정 ================= -->
	
	 <!-- SqlSessionFactory 객체 -->
	<beans:bean id="sessionFactory" 
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="configLocation"
	value="classpath:com/gura/spring05/mybatis/Configuration.xml"/>
	 <!-- 위의 문장으로 Mapper 사용할 준비하기 -->
	</beans:bean>
	  <!-- 
      sessionFactory=new SqlSessionFactoryBean();
      sessionFactory.setDataSource(dataSource);
      sessionFactory.setConfigLocation("classpath:com/gura/xxx");
      -->
	
	<beans:bean class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg name="sqlSessionFactory" 
			ref="sessionFactory"/>
	</beans:bean>
	
	<!-- ============== SplSessionFactory 설정 ================= -->
	
	
	
	
	<!-- ============== 트랜잭션 설정 ================= -->
	
	<!-- Spring Transaction Manager 설정. (class에 datasourceTransaction manager이 등록되어있어야함)-->
	<!-- SqlSession 인터페이스를 구현한 SqlSessionTemplate(SqlSession) 객체 Dao 가 의존하는 객체 
		txManger=new DataSourceTransactionManager();
		txManager.setDataSource(dataSource);를 대신하는 코드이다.-->
	<beans:bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>
	
	<!-- @Transactional 어노테이션으로 트랜잭션을 관리할 수 있도록 설정 -->
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<!-- ============== 트랜잭션 설정 ================= -->
	
	
	
	
	
	
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="1"/>
	</beans:bean>
	
	<!-- spring05의 모든 객체를 component-scan 하여 빈으로 관리할 것들을 스프링 컨테이너에 생성 -->
	<context:component-scan base-package="com.gura.spring05" />
	
	
	<!-- Multipart 폼 전송 처리를 위한 bean 설정 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="102400000"/>
	</beans:bean>
	
	<!-- 
		bean 의 이름을 이용해서 view 로 이동할수 있도록 설정 
		setOrder(0) 는 0 순위로 찾아 가겠다는 의미 
		0 순위로 찾아서 없으면 
		views 폴더 안에서 jsp 페이지를 찾게 된다. 	
	-->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0"/>
	</beans:bean>
	
	<!-- 어노테이션 기반으로 aop 적용 가능하게 하기 (활성화하려면 Namespaces 에서 문서 형식 aop 추가해야함)-->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
</beans:beans>
