<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 
		JNDI(디렉토리 서비스에서 제공하는 데이터 및 객체를 발견하고 참고 하기 위한 자바 API) 
		데이터 소스 객체 얻어오는 설정   
		Servers/context.xml 에 설정된 oracle 접속정보 가 있어야 된다. 
		 
		<Resource name="jdbc/myoracle" auth="Container"
              type="javax.sql.DataSource" driverClassName="oracle.jdbc.OracleDriver"
              url="jdbc:oracle:thin:@127.0.0.1:1521:xe"
              username="scott" password="tiger" maxTotal="20" maxIdle="10"
              maxWaitMillis="-1"/>    		
	-->
	<beans:bean id="dataSource" 
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="java:comp/env/jdbc/myoracle"/>
	</beans:bean>
	<!-- 
		위는 아래의 코드와 같다
		dataSource = new JndiObjectFactoryBean();
		dataSource.setJndiName("java:comp/env/jdbc/myoracle");
	 -->
	
	<!-- DI : dependency injection  - 의존성 주입
	class SqlSessionTemplate implements SqlSession  (sqlsession 인터페이스를 구현한 객체 그래서 sqlsession 타입이기도 함)
	-->
	
	<!-- SqlSessionFactory 객체 -->
	<beans:bean id="sessionFactory" 
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="configLocation"
	value="classpath:com/gura/spring04/mybatis/Configuration.xml"/>
	<!-- 위의 문장으로 Mapper 사용할 준비하기 -->
	</beans:bean>
	<!-- 
		sessionFactory=new SqlSessionFactoryBean();
		sessionFactory.setDataSource(dataSource);
		sessionFactory.setConfigLocation("classpath:com/gura/xxx");
	 -->
	

	<!-- 
		SqlSession 인터페이스를 구현한 
		SqlSessionTemplate(SqlSession) 객체 
		Dao 가 의존하는 객체 
	-->
	<beans:bean class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg name="sqlSessionFactory" 
			ref="sessionFactory"/>
	</beans:bean>
	<!-- 
		new SqlSessionTemplate(sessionFactory);
	 -->	
	
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- 어노테이션을 사용할 수 있도록 설정하기 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 뷰 해석기 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 뷰(jsp)의 접두어, 접미어 설정 : 파일명만 작성할 수 있게 세팅하기 -->
		<!-- 접두어(디렉토리) -->
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<!-- 접미어(확장자 .jsp 형태의 파일만 쓸 것임) -->
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.gura.spring04" />
	
	
	
</beans:beans>
